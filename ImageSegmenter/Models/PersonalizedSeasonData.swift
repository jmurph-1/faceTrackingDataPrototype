//
//  PersonalizedSeasonData.swift
//  ImageSegmenter
//
//  Created by John Murphy on 5/28/25.
//

import Foundation
import UIKit

/// Represents personalized season data generated by LLM based on user's specific characteristics
struct PersonalizedSeasonData: Codable {
    
    // MARK: - Properties
    
    /// Unique identifier for this personalization
    let id: UUID
    
    /// Date when personalization was created
    let createdDate: Date
    
    /// User's assigned season
    let baseSeason: String
    
    /// Personalized tagline for the user
    let personalizedTagline: String
    
    /// User's unique characteristics description
    let userCharacteristics: String
    
    /// Personalized overview text
    let personalizedOverview: String
    
    /// Color recommendations specific to the user
    let colorRecommendations: PersonalizedColorRecommendations
    
    /// Styling advice tailored to the user
    let stylingAdvice: PersonalizedStylingAdvice
    
    /// Best colors from the palette for this specific user
    let emphasizedColors: [String] // Hex color values
    
    /// Colors to especially avoid for this user
    let colorsToAvoid: [String] // Hex color values
    
    /// Confidence score for the personalization (0.0 - 1.0)
    let confidence: Float
    
    /// Original analysis result ID this personalization is based on
    let analysisResultId: UUID?
    
    // MARK: - Initialization
    
    init(
        id: UUID = UUID(),
        createdDate: Date = Date(),
        baseSeason: String,
        personalizedTagline: String,
        userCharacteristics: String,
        personalizedOverview: String,
        colorRecommendations: PersonalizedColorRecommendations,
        stylingAdvice: PersonalizedStylingAdvice,
        emphasizedColors: [String],
        colorsToAvoid: [String],
        confidence: Float,
        analysisResultId: UUID? = nil
    ) {
        self.id = id
        self.createdDate = createdDate
        self.baseSeason = baseSeason
        self.personalizedTagline = personalizedTagline
        self.userCharacteristics = userCharacteristics
        self.personalizedOverview = personalizedOverview
        self.colorRecommendations = colorRecommendations
        self.stylingAdvice = stylingAdvice
        self.emphasizedColors = emphasizedColors
        self.colorsToAvoid = colorsToAvoid
        self.confidence = confidence
        self.analysisResultId = analysisResultId
    }
}

// MARK: - PersonalizedColorRecommendations

struct PersonalizedColorRecommendations: Codable {
    
    /// Best neutral colors for this user
    let bestNeutrals: ColorRecommendation
    
    /// Best accent colors for this user
    let bestAccents: ColorRecommendation
    
    /// Base colors that work particularly well
    let bestBaseColors: ColorRecommendation
    
    /// Lip color recommendations
    let lipColors: ColorRecommendation
    
    /// Eye makeup color recommendations
    let eyeColors: ColorRecommendation
    
    /// Hair color suggestions (if applicable)
    let hairColorSuggestions: ColorRecommendation?
}

// MARK: - ColorRecommendation

struct ColorRecommendation: Codable {
    
    /// Description of why these colors work for the user
    let description: String
    
    /// Recommended hex color values
    let colors: [String]
    
    /// Priority level (high, medium, low)
    let priority: String
    
    /// Specific usage instructions
    let usageInstructions: String
}

// MARK: - PersonalizedStylingAdvice

struct PersonalizedStylingAdvice: Codable {
    
    /// Clothing style recommendations
    let clothingAdvice: StylingRecommendation
    
    /// Accessory recommendations
    let accessoryAdvice: StylingRecommendation
    
    /// Pattern and print recommendations
    let patternAdvice: StylingRecommendation
    
    /// Metal recommendations (gold, silver, etc.)
    let metalAdvice: StylingRecommendation
    
    /// Special considerations for this user
    let specialConsiderations: String
}

// MARK: - StylingRecommendation

struct StylingRecommendation: Codable {
    
    /// Main recommendation text
    let recommendation: String
    
    /// Specific tips
    let tips: [String]
    
    /// Things to avoid
    let avoid: [String]
    
    /// Examples
    let examples: [String]
}

// MARK: - Convenience Extensions

extension PersonalizedSeasonData {
    
    /// Get emphasized colors as UIColor objects
    var emphasizedUIColors: [UIColor] {
        return emphasizedColors.compactMap { UIColor(hex: $0) }
    }
    
    /// Get colors to avoid as UIColor objects
    var colorsToAvoidUIColors: [UIColor] {
        return colorsToAvoid.compactMap { UIColor(hex: $0) }
    }
    
    /// Get formatted creation date
    var formattedDate: String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        return formatter.string(from: createdDate)
    }
    
    /// Get confidence as percentage
    var confidencePercentage: String {
        return "\(Int(confidence * 100))%"
    }
    
    /// Get the display name for the season (handles both 4-season and 12-season names)
    var displaySeasonName: String {
        // If baseSeason is already a 12-season name, use it as is
        if baseSeason.contains(" ") {
            return baseSeason
        }
        
        // Otherwise, map 4-season to 12-season name
        switch baseSeason.lowercased() {
        case "spring":
            return "True Spring"
        case "summer":
            return "True Summer"
        case "autumn":
            return "True Autumn"
        case "winter":
            return "True Winter"
        default:
            return baseSeason
        }
    }
}

// MARK: - UIColor Extension for Hex Support

extension UIColor {
    convenience init?(hex: String) {
        var hexSanitized = hex.trimmingCharacters(in: .whitespacesAndNewlines)
        hexSanitized = hexSanitized.replacingOccurrences(of: "#", with: "")
        
        var rgb: UInt64 = 0
        
        guard Scanner(string: hexSanitized).scanHexInt64(&rgb) else {
            return nil
        }
        
        self.init(
            red: CGFloat((rgb & 0xFF0000) >> 16) / 255.0,
            green: CGFloat((rgb & 0x00FF00) >> 8) / 255.0,
            blue: CGFloat(rgb & 0x0000FF) / 255.0,
            alpha: 1.0
        )
    }
    
    var hexString: String {
        var red: CGFloat = 0
        var green: CGFloat = 0
        var blue: CGFloat = 0
        var alpha: CGFloat = 0
        
        getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        
        return String(format: "#%02X%02X%02X",
                     Int(red * 255),
                     Int(green * 255),
                     Int(blue * 255))
    }
}

// MARK: - Core Data Support

extension PersonalizedSeasonData {
    
    /// Convert to JSON data for Core Data storage
    func toJSONData() -> Data? {
        return try? JSONEncoder().encode(self)
    }
    
    /// Create from JSON data stored in Core Data
    static func fromJSONData(_ data: Data) -> PersonalizedSeasonData? {
        return try? JSONDecoder().decode(PersonalizedSeasonData.self, from: data)
    }
}

